{
  "stats": {
    "suites": 16,
    "tests": 121,
    "passes": 107,
    "pending": 13,
    "failures": 1,
    "start": "2021-02-01T18:24:16.441Z",
    "end": "2021-02-01T18:30:47.789Z",
    "duration": 391348,
    "testsRegistered": 121,
    "passPercent": 99.07407407407408,
    "pendingPercent": 10.743801652892563,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e8bb7cc2-eacf-4262-bec0-ab6646be411b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
          "title": "Ticket_testing",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\10_ticket_tesing.js",
          "file": "\\test\\10_ticket_tesing.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Post Merchant Config successful, return 204",
              "fullTitle": "Ticket_testing Post Merchant Config successful, return 204",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "dba8d5c5-9e1c-4516-a70d-8dcd857b13b0",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Financial Transaction is successful, return 200",
              "fullTitle": "Ticket_testing Financial Transaction is successful, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "507ae931-f14d-4c01-8d40-1dc8cbdcd4e6",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " offline Advice transaction, return 200",
              "fullTitle": "Ticket_testing  offline Advice transaction, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "02fd7e76-67b8-4e5a-bf47-b583a615be97",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "authorize from offlineQueue is successful, return 200",
              "fullTitle": "Ticket_testing authorize from offlineQueue is successful, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "533b609e-65d6-47f6-8475-d1cc2b4e323c",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "offlineQueue authorize ONLY, return 200",
              "fullTitle": "Ticket_testing offlineQueue authorize ONLY, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "44225bb6-1ba4-424a-819e-dd0a5ff8b99e",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reverse Transaction, return 200",
              "fullTitle": "Ticket_testing Reverse Transaction, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "12b60ad3-bd65-45f5-8d25-42d8fadee868",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "COUNT offlineTransaction Count is successful,return 200",
              "fullTitle": "Ticket_testing COUNT offlineTransaction Count is successful,return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6683acbf-9891-4a63-a11a-80f8e7d0043a",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE offline Transaction successful, return 204",
              "fullTitle": "Ticket_testing DELETE offline Transaction successful, return 204",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0532b952-2e4d-4d36-aae3-fcc4bb01bfc0",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET offline Transaction successful, return 200",
              "fullTitle": "Ticket_testing GET offline Transaction successful, return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0f8875de-1d88-482b-8f20-9371a46ffb38",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Financial request 000000000998, create TOR",
              "fullTitle": "Ticket_testing When Financial request 000000000998, create TOR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "72879205-1979-4165-bb95-49e7fa734a53",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Financial request 000000000999, create TOR",
              "fullTitle": "Ticket_testing When Financial request 000000000999, create TOR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0892b01b-50ec-4f3d-a4d6-622b25d6fee5",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When OpeN2 not recieve the request 0200, reversal should happen automatically",
              "fullTitle": "Ticket_testing When OpeN2 not recieve the request 0200, reversal should happen automatically",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9b90be6e-a3fc-46dc-a45c-ec54c99df893",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T48 - When valid Network Management transaction request, it should return 200",
              "fullTitle": "Ticket_testing IP-T48 - When valid Network Management transaction request, it should return 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "94de680b-c08f-4689-b76d-aaeec4d8d8b8",
              "parentUUID": "bb2a633d-5d1a-4c3c-b4df-240ea348fa38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "dba8d5c5-9e1c-4516-a70d-8dcd857b13b0",
            "507ae931-f14d-4c01-8d40-1dc8cbdcd4e6",
            "02fd7e76-67b8-4e5a-bf47-b583a615be97",
            "533b609e-65d6-47f6-8475-d1cc2b4e323c",
            "44225bb6-1ba4-424a-819e-dd0a5ff8b99e",
            "12b60ad3-bd65-45f5-8d25-42d8fadee868",
            "6683acbf-9891-4a63-a11a-80f8e7d0043a",
            "0532b952-2e4d-4d36-aae3-fcc4bb01bfc0",
            "0f8875de-1d88-482b-8f20-9371a46ffb38",
            "72879205-1979-4165-bb95-49e7fa734a53",
            "0892b01b-50ec-4f3d-a4d6-622b25d6fee5",
            "9b90be6e-a3fc-46dc-a45c-ec54c99df893",
            "94de680b-c08f-4689-b76d-aaeec4d8d8b8"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "90584a70-2e31-4dd3-ae40-5948ebe6973d",
          "title": "getVersion",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\1_Version.spec.js",
          "file": "\\test\\1_Version.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "when get version successful it should return 200",
              "fullTitle": "getVersion when get version successful it should return 200",
              "timedOut": false,
              "duration": 294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setTimeout(function () {\n//     try {\n//         expect(false).equal(true);\n//     } catch (err) {\n//         done(err);\n//     }\n// }, this.timeout() * 2);\npxp.getVersion()\n    .then((resp) => {\n        //console.log(resp.body);\n        logger.info(resp.body);\n        expect(resp).to.have.status(200);\n        done();\n    })\n    .catch((err) => {\n        done(err);\n    });",
              "err": {},
              "uuid": "50432a20-ab95-4627-b472-e7227690b759",
              "parentUUID": "90584a70-2e31-4dd3-ae40-5948ebe6973d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when bad request, getVersion should return 404",
              "fullTitle": "getVersion when bad request, getVersion should return 404",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getVersion(\"verssion\")\n    .then((resp) => {\n        logger.info(resp.body);\n        expect(resp).to.have.status(404);\n        expect(resp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((err) => {\n        done(err);\n    });",
              "err": {},
              "uuid": "ab708d51-4de1-4717-808f-1800c91d1a15",
              "parentUUID": "90584a70-2e31-4dd3-ae40-5948ebe6973d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50432a20-ab95-4627-b472-e7227690b759",
            "ab708d51-4de1-4717-808f-1800c91d1a15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 399,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "a72097b0-2e19-4bf0-b403-b24e0b6c3ba9",
          "title": "getMerchantConfigs",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\2_merchantConfigs.spec.js",
          "file": "\\test\\2_merchantConfigs.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "IP-T42: When successful it, should return 200",
              "fullTitle": "getMerchantConfigs IP-T42: When successful it, should return 200",
              "timedOut": false,
              "duration": 909,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        //console.log(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(204);\n        pxp.getMerchantConfigs()\n            .then((getMerchConfigsRsp) => {\n                logger.info(getMerchConfigsRsp.body);\n                expect(getMerchConfigsRsp).to.have.status(200);\n                merchConfigsReq.should.jsonEqual(\n                    getMerchConfigsRsp.body\n                );\n                done();\n            })\n            .catch((getMerchConfigsErr) => {\n                done(getMerchConfigsErr);\n            });\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "409c911e-4ce3-4345-a361-c2d441adce0a",
              "parentUUID": "a72097b0-2e19-4bf0-b403-b24e0b6c3ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " When bad request, it should return 404",
              "fullTitle": "getMerchantConfigs  When bad request, it should return 404",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getMerchantConfigs(\"/merchanntConfigs\")\n    .then((getMerchConfigsRsp) => {\n        logger.info(getMerchConfigsRsp.body);\n        expect(getMerchConfigsRsp).to.have.status(404);\n        expect(getMerchConfigsRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((getMerchConfigsErr) => {\n        done(getMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "1e545a02-edda-409f-a870-bf1865b88765",
              "parentUUID": "a72097b0-2e19-4bf0-b403-b24e0b6c3ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T43: When merchantConfigs do not exist it should return 404",
              "fullTitle": "getMerchantConfigs IP-T43: When merchantConfigs do not exist it should return 404",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteMerchantConfigs()\n    .then((delMerchConfigsRsp) => {\n        pxp.getMerchantConfigs()\n            .then((getMerchConfigsRsp) => {\n                logger.info(getMerchConfigsRsp.body);\n                expect(getMerchConfigsRsp).to.have.status(404);\n                expect(getMerchConfigsRsp.body.resultCode).equal(-112);\n                done();\n            })\n            .catch((getMerchConfigsErr) => {\n                done(getMerchConfigsErr);\n            });\n    })\n    .catch((delMerchConfigsErr) => {\n        done(delMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "7a0b4636-f447-4093-8a9a-d69b28628a59",
              "parentUUID": "a72097b0-2e19-4bf0-b403-b24e0b6c3ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T191: When successful, the response should have valid schema",
              "fullTitle": "getMerchantConfigs IP-T191: When successful, the response should have valid schema",
              "timedOut": false,
              "duration": 947,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        //expect(postMerchConfigsRsp).to.have.status(204)\n        pxp.getMerchantConfigs()\n            .then((getMerchConfigsRsp) => {\n                logger.info(getMerchConfigsRsp.body);\n                expect(getMerchConfigsRsp).to.have.status(200);\n                expect(getMerchConfigsRsp.body).to.be.jsonSchema(\n                    getMerchantConfigsRspSchema\n                );\n                done();\n            })\n            .catch((getMerchConfigsErr) => {\n                done(getMerchConfigsErr);\n            });\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "f76834b5-cb35-4913-b58e-76208ecd6b90",
              "parentUUID": "a72097b0-2e19-4bf0-b403-b24e0b6c3ba9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "409c911e-4ce3-4345-a361-c2d441adce0a",
            "1e545a02-edda-409f-a870-bf1865b88765",
            "7a0b4636-f447-4093-8a9a-d69b28628a59",
            "f76834b5-cb35-4913-b58e-76208ecd6b90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2430,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
          "title": "postMerchantConfigs",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\2_merchantConfigs.spec.js",
          "file": "\\test\\2_merchantConfigs.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "IP-T35: When successful it should return 204",
              "fullTitle": "postMerchantConfigs IP-T35: When successful it should return 204",
              "timedOut": false,
              "duration": 418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        expect(postMerchConfigsRsp).to.have.status(204);\n        pxp.getMerchantConfigs()\n            .then((getMerchConfigsRsp) => {\n                //logger.info(getMerchConfigsRsp.body);\n                expect(getMerchConfigsRsp).to.have.status(200);\n                done();\n            })\n            .catch((getMerchConfigsErr) => {\n                done(getMerchConfigsErr);\n            });\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "a61e00f0-1638-4518-9040-0033e0b227fe",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When no JSON it should return 422",
              "fullTitle": "postMerchantConfigs When no JSON it should return 422",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(undefined)\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "686884e6-ed02-45cf-b9f9-f965fc317858",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When empty JSON it should return 422",
              "fullTitle": "postMerchantConfigs When empty JSON it should return 422",
              "timedOut": false,
              "duration": 1441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "7f4ca573-4a02-44c2-9296-d6695e447f47",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request it should return 422",
              "fullTitle": "postMerchantConfigs When bad request it should return 422",
              "timedOut": false,
              "duration": 320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostedIP: \"194.71.18.73\",\n    hostedPort: 7135,\n    connectionTimeout: 12000,\n    keysIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "b9e92a66-30aa-401f-91ec-bd6113177a0e",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T293: When bad request, it should return 404",
              "fullTitle": "postMerchantConfigs IP-T293: When bad request, it should return 404",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq, \"/merchanntConfigs\")\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(404);\n        //console.log(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "9e385a1c-d6fb-4e36-bd21-bbc063e8d95b",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T294: When keyIndex is less than 1, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T294: When keyIndex is less than 1, it should return 422",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    keyIndex: 0,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "c5a30ecd-5508-4cc5-9b48-2ea4d860e211",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T295: When keyIndex is more than 100, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T295: When keyIndex is more than 100, it should return 422",
              "timedOut": false,
              "duration": 342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    keyIndex: 999,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "4f24ef9c-8bee-4c09-98c0-93424b948ee1",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T95: When hostIP length is more than 64, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T95: When hostIP length is more than 64, it should return 422",
              "timedOut": false,
              "duration": 591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP:\n        \"ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:ABCD:192.168.158.190\",\n    hostPort: 7135,\n    connectionTimeout: 12000,\n    keysIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "92f0b3d5-d048-4bec-84cf-f691a5a754e5",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T96: When hostIP is integer, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T96: When hostIP is integer, it should return 422",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: 192168158.19,\n    hostPort: 7135,\n    connectionTimeout: 12000,\n    keysIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "c6115e7b-8a23-4c8c-9ac9-50529aef8b8c",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T97: When hostPort length is more than 5, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T97: When hostPort length is more than 5, it should return 422",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"713555\",\n    connectionTimeout: 12000,\n    keysIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "397ded20-4898-42f1-ac99-7926013a0896",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T98: When hostPort is integer, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T98: When hostPort is integer, it should return 422",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: 7135,\n    connectionTimeout: 12000,\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "986035a5-33d0-4ba5-901e-91413e7cf95b",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T99: When connectionTimeout length is more than 12, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T99: When connectionTimeout length is more than 12, it should return 422",
              "timedOut": false,
              "duration": 338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 120001200012000,\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "8acc112b-a40c-4800-877c-ea8bcfb8c8a3",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T100: When  connectionTimeout is string, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T100: When  connectionTimeout is string, it should return 422",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: \"12000\",\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "cc7a2ef7-230b-4f14-91a1-1a22b0c6f0cd",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T101: When keyIndex is string, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T101: When keyIndex is string, it should return 422",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    keyIndex: \"1\",\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "aabfd409-5df4-4587-ab57-dac9e16c2d1f",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T102: When terminalId is integer, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T102: When terminalId is integer, it should return 422",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    keyIndex: 1,\n    terminalId: 00112288,\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "00f93bf5-2519-41d7-9eb4-fc979583d14a",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T38-A: When request is missing hostIP, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T38-A: When request is missing hostIP, it should return 422",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "91e4a78e-d093-4c30-a7bc-e431aa430fb2",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T38-B: When request is missing hostPort, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T38-B: When request is missing hostPort, it should return 422",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    connectionTimeout: 12000,\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "1337a70d-10dd-4179-a658-c023eb4598b3",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T38-C: When request is missing connectionTimeout, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T38-C: When request is missing connectionTimeout, it should return 422",
              "timedOut": false,
              "duration": 447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    keyIndex: 1,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "afc677e2-3d9c-4fd5-9423-eee7ea55a178",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T38-D: When request is missing keyIndex, it should return 422",
              "fullTitle": "postMerchantConfigs IP-T38-D: When request is missing keyIndex, it should return 422",
              "timedOut": false,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs({\n    hostIP: \"194.71.18.73\",\n    hostPort: \"7135\",\n    connectionTimeout: 12000,\n    terminalId: \"00112288\",\n})\n    .then((postMerchConfigsRsp) => {\n        logger.info(postMerchConfigsRsp.body);\n        expect(postMerchConfigsRsp).to.have.status(422);\n        expect(postMerchConfigsRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "8c2a7e31-b539-4264-8458-03273d32e985",
              "parentUUID": "494bcc2e-311c-4dd2-9aa4-9bfd675fbe65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a61e00f0-1638-4518-9040-0033e0b227fe",
            "686884e6-ed02-45cf-b9f9-f965fc317858",
            "7f4ca573-4a02-44c2-9296-d6695e447f47",
            "b9e92a66-30aa-401f-91ec-bd6113177a0e",
            "9e385a1c-d6fb-4e36-bd21-bbc063e8d95b",
            "c5a30ecd-5508-4cc5-9b48-2ea4d860e211",
            "4f24ef9c-8bee-4c09-98c0-93424b948ee1",
            "92f0b3d5-d048-4bec-84cf-f691a5a754e5",
            "c6115e7b-8a23-4c8c-9ac9-50529aef8b8c",
            "397ded20-4898-42f1-ac99-7926013a0896",
            "986035a5-33d0-4ba5-901e-91413e7cf95b",
            "8acc112b-a40c-4800-877c-ea8bcfb8c8a3",
            "cc7a2ef7-230b-4f14-91a1-1a22b0c6f0cd",
            "aabfd409-5df4-4587-ab57-dac9e16c2d1f",
            "00f93bf5-2519-41d7-9eb4-fc979583d14a",
            "91e4a78e-d093-4c30-a7bc-e431aa430fb2",
            "1337a70d-10dd-4179-a658-c023eb4598b3",
            "afc677e2-3d9c-4fd5-9423-eee7ea55a178",
            "8c2a7e31-b539-4264-8458-03273d32e985"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6508,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "f00557fd-881a-419a-a283-fd1fb5b6bcb1",
          "title": "deleteMerchantConfigs",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\2_merchantConfigs.spec.js",
          "file": "\\test\\2_merchantConfigs.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "deleteMerchantConfigs \"after all\" hook",
              "timedOut": false,
              "duration": 117,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "368d27a0-40d9-4f12-96a3-9a39c38f29c4",
              "parentUUID": "f00557fd-881a-419a-a283-fd1fb5b6bcb1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T39: When delete merchant config is successful it should return 204",
              "fullTitle": "deleteMerchantConfigs IP-T39: When delete merchant config is successful it should return 204",
              "timedOut": false,
              "duration": 673,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        expect(postMerchConfigsRsp).to.have.status(204);\n        pxp.deleteMerchantConfigs()\n            .then((delMerchConfigsRsp) => {\n                expect(delMerchConfigsRsp).to.have.status(204);\n                done();\n            })\n            .catch((delMerchConfigsErr) => {\n                done(delMerchConfigsErr);\n            });\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "9cc81203-7ffc-4d0a-8a0a-345da78f017a",
              "parentUUID": "f00557fd-881a-419a-a283-fd1fb5b6bcb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " When bad request, it should return 404",
              "fullTitle": "deleteMerchantConfigs  When bad request, it should return 404",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteMerchantConfigs(\"/merchanntConfigs\")\n    .then((delMerchConfigsRsp) => {\n        logger.info(delMerchConfigsRsp.body);\n        expect(delMerchConfigsRsp).to.have.status(404);\n        expect(delMerchConfigsRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((getMerchConfigsErr) => {\n        done(getMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "0bc784e1-9ea1-47a6-95c9-5f4bd83371c1",
              "parentUUID": "f00557fd-881a-419a-a283-fd1fb5b6bcb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9cc81203-7ffc-4d0a-8a0a-345da78f017a",
            "0bc784e1-9ea1-47a6-95c9-5f4bd83371c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "07192650-ce4b-4d17-b844-b30806db14de",
          "title": "authorizeTransactionOnline",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\3_onlineTransaction.spec.js",
          "file": "\\test\\3_onlineTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "authorizeTransactionOnline \"before all\" hook",
              "timedOut": false,
              "duration": 123,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "de266c4e-ff45-4ba1-9639-29be5e0cb50e",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "authorizeTransactionOnline \"after each\" hook",
              "timedOut": false,
              "duration": 348,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "7bc26bf6-16a2-4de8-a256-392c4dd216e4",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T47 - When valid Reconciliation Transaction request, it should return 200",
              "fullTitle": "authorizeTransactionOnline IP-T47 - When valid Reconciliation Transaction request, it should return 200",
              "timedOut": false,
              "duration": 1776,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log('Test Start');\npxp.postAuthorizeTransactionOnline(reconcilReq)\n    .then((reconcilRsp) => {\n        logger.info(reconcilRsp.body);\n        expect(reconcilRsp).to.have.status(200);\n        done();\n    })\n    .catch((reconcilErr) => {\n        done(reconcilErr);\n    });",
              "err": {},
              "uuid": "c3e3589c-b013-4a43-8f32-6e38284382d9",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Reconciliation transaction is successful, the response should have valid schema",
              "fullTitle": "authorizeTransactionOnline When Reconciliation transaction is successful, the response should have valid schema",
              "timedOut": false,
              "duration": 1382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log('Test Start');\npxp.postAuthorizeTransactionOnline(reconcilReq)\n    .then((reconcilRsp) => {\n        expect(reconcilRsp).to.have.status(200);\n        logger.info(reconcilRsp.body);\n        expect(reconcilRsp.body).to.be.jsonSchema(\n            reconcilRspSchema\n        );\n        done();\n    })\n    .catch((reconcilErr) => {\n        done(reconcilErr);\n    });",
              "err": {},
              "uuid": "a172b9d6-0d60-4ae0-a284-d0cf2081c08c",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-238 - When Reconciliation transaction is successful, the response should have valid schema of reconciliationResponse",
              "fullTitle": "authorizeTransactionOnline IP-238 - When Reconciliation transaction is successful, the response should have valid schema of reconciliationResponse",
              "timedOut": false,
              "duration": 1452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log('Test Start');\npxp.postAuthorizeTransactionOnline(reconcilReq)\n    .then((reconcilRsp) => {\n        logger.info(reconcilRsp.body.reconciliationResponse);\n        expect(reconcilRsp).to.have.status(200);\n        expect(\n            reconcilRsp.body.reconciliationResponse\n        ).to.be.jsonSchema(reconciliationResponseInfoSchema);\n        done();\n    })\n    .catch((reconcilErr) => {\n        done(reconcilErr);\n    });",
              "err": {},
              "uuid": "9bae3817-5968-4235-a1ff-36189113deb3",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Reconciliation transaction is successful, it should not add to offline queue",
              "fullTitle": "authorizeTransactionOnline When Reconciliation transaction is successful, it should not add to offline queue",
              "timedOut": false,
              "duration": 2204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(200);\n        var count = offlineRsp.body.transactionCount;\n        pxp.postAuthorizeTransactionOnline(reconcilReq)\n            .then((reconcilRsp) => {\n                expect(reconcilRsp).to.have.status(200);\n                pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        expect(offlineRsp).to.have.status(200);\n                        expect(\n                            Number(offlineRsp.body.transactionCount)\n                        ).to.equal(Number(count));\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n            })\n            .catch((reconcilErr) => {\n                done(reconcilErr);\n            });\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "43d944cd-88e0-4924-8e7c-fd6815e7dbb4",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T48 - When valid Network Management transaction request, it should return 200",
              "fullTitle": "authorizeTransactionOnline IP-T48 - When valid Network Management transaction request, it should return 200",
              "timedOut": false,
              "duration": 1669,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(ntwrkMgtReq)\n    .then((ntwrkMgtRsp) => {\n        logger.info(ntwrkMgtRsp.body);\n        expect(ntwrkMgtRsp).to.have.status(200);\n        done();\n    })\n    .catch((ntwrkMgtErr) => {\n        done(ntwrkMgtErr);\n    });",
              "err": {},
              "uuid": "d65ef58a-d392-4588-97f0-28367eeb1867",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Network Management transaction is successful, the response should have valid schema",
              "fullTitle": "authorizeTransactionOnline When Network Management transaction is successful, the response should have valid schema",
              "timedOut": false,
              "duration": 1694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(ntwrkMgtReq)\n    .then((ntwrkMgtRsp) => {\n        logger.info(ntwrkMgtRsp.body);\n        expect(ntwrkMgtRsp).to.have.status(200);\n        expect(ntwrkMgtRsp.body).to.be.jsonSchema(\n            ntwrkRspSchema\n        );\n        done();\n    })\n    .catch((ntwrkMgtErr) => {\n        done(ntwrkMgtErr);\n    });",
              "err": {},
              "uuid": "616dd85e-243b-41e6-9ac7-afb8b8e01835",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Advice transaction is successful, it should return 200",
              "fullTitle": "authorizeTransactionOnline When Advice transaction is successful, it should return 200",
              "timedOut": false,
              "duration": 2271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(adviceReq)\n    .then((adviceRsp) => {\n        logger.info(adviceRsp.body);\n        expect(adviceRsp).to.have.status(200);\n        done();\n    })\n    .catch((adviceErr) => {\n        done(adviceErr);\n    });",
              "err": {},
              "uuid": "3aa50b76-febb-4453-bebd-982636ca2946",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T46 - When Financial Transaction is successful, it should return 200",
              "fullTitle": "authorizeTransactionOnline IP-T46 - When Financial Transaction is successful, it should return 200",
              "timedOut": false,
              "duration": 2216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000002\";\nconsole.log(financialReq.paymentInfo.amount);\nfinancialReq.paymentInfo.localDateAndTime = \"200622121124\";\npxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n       logger.info(financialRsp.body);\n        expect(financialRsp).to.have.status(200);\n        //expect (financialRsp.body.responseCode).equal('00');\n        var responseCode = financialRsp.body.responseCode;\n        if (responseCode === \"00\") {\n            var refNum = financialRsp.body.retrievalReferenceNumber;\n            const aprvReq = {\n                retrievalReferenceNumber: refNum,\n            };\n            pxp.postApproveAuthorizedTransaction(aprvReq)\n                .then((approveRsp) => {\n                    expect(approveRsp).to.have.status(204);\n                    done();\n                })\n                .catch((approveErr) => {\n                    done(approveErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "b1548e50-9ec3-4d00-9244-44e6f1a20419",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Financial transaction is successful, the response should have valid schema",
              "fullTitle": "authorizeTransactionOnline When Financial transaction is successful, the response should have valid schema",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        logger.info(financialRsp.body);\n        expect(financialRsp).to.have.status(200);\n        expect(financialRsp.body).to.be.jsonSchema(\n            postAuthorizeTransactionOnlineRspSchema\n        );\n        done();\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "591a617b-e411-43c7-ac2b-8d419cb9b693",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Financial request with amount 000000000000, it should return 200",
              "fullTitle": "authorizeTransactionOnline When Financial request with amount 000000000000, it should return 200",
              "timedOut": false,
              "duration": 2373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "start = Date.now();\nfinancialReq.paymentInfo.amount = \"000000000000\";\npxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        logger.info(financialRsp.body);\n        expect(financialRsp).to.have.status(200);\n        done();\n    })\n    .catch((ntwrkMgtErr) => {\n        done(ntwrkMgtErr);\n    });",
              "err": {},
              "uuid": "5838b42e-1c5f-4cf4-a729-0e652720e0f5",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Newtwork Management transaction is successful, it should not add to offline queue",
              "fullTitle": "authorizeTransactionOnline When Newtwork Management transaction is successful, it should not add to offline queue",
              "timedOut": false,
              "duration": 1777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(200);\n        var count = offlineRsp.body.transactionCount;\n        pxp.postAuthorizeTransactionOnline(ntwrkMgtReq)\n            .then((ntwrkMgtRsp) => {\n                logger.info(ntwrkMgtRsp.body);\n                expect(ntwrkMgtRsp).to.have.status(200);\n                pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        expect(offlineRsp).to.have.status(200);\n                        expect(\n                            Number(offlineRsp.body.transactionCount)\n                        ).to.equal(Number(count));\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n            })\n            .catch((ntwrkMgtErr) => {\n                done(ntwrkMgtErr);\n            });\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "e642c9b5-50c8-47e4-a9f5-2237ab7af3fc",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When MAC key not valid it should return 409/-121",
              "fullTitle": "authorizeTransactionOnline When MAC key not valid it should return 409/-121",
              "timedOut": false,
              "duration": 1379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigKey)\n    .then((postMerchConfigsIPRsp) => {\n        expect(postMerchConfigsIPRsp).to.have.status(204);\n        pxp.postAuthorizeTransactionOnline(financialReq)\n            .then((financialRsp) => {\n                logger.info(financialRsp.body);\n                expect(financialRsp.body.resultCode).equal(-121);\n                expect(financialRsp).to.have.status(409);\n                pxp.postMerchantConfigs(merchConfigsReq)\n                    .then((postMerchConfigsRsp) => {\n                        done();\n                    })\n                    .catch((postMerchConfigsErr) => {\n                        done(postMerchConfigsErr);\n                    });\n            })\n            .catch((financialErr) => {\n                done(financialErr);\n            });\n    })\n    .catch((postMerchConfigsIPErr) => {\n        done(postMerchConfigsIPErr);\n    });",
              "err": {},
              "uuid": "3a1df585-fc0c-4f51-8fe4-19114f2ef999",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When MAC key not injected it should return 409/-121",
              "fullTitle": "authorizeTransactionOnline When MAC key not injected it should return 409/-121",
              "timedOut": false,
              "duration": 750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "merchConfigKey.keyIndex = 25;\npxp.postMerchantConfigs(merchConfigKey)\n    .then((postMerchConfigsIPRsp) => {\n        expect(postMerchConfigsIPRsp).to.have.status(204);\n        pxp.postAuthorizeTransactionOnline(financialReq)\n            .then((financialRsp) => {\n                logger.info(financialRsp.body);\n                expect(financialRsp.body.resultCode).equal(-121);\n                expect(financialRsp).to.have.status(409);\n                pxp.postMerchantConfigs(merchConfigsReq)\n                    .then((postMerchConfigsRsp) => {\n                        done();\n                    })\n                    .catch((postMerchConfigsErr) => {\n                        done(postMerchConfigsErr);\n                    });\n            })\n            .catch((financialErr) => {\n                done(financialErr);\n            });\n    })\n    .catch((postMerchConfigsIPErr) => {\n        done(postMerchConfigsIPErr);\n    });",
              "err": {},
              "uuid": "77fcbc52-b280-4be6-9dac-cd2de57b94d3",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When merchant config is not exist, it should return 409/-112",
              "fullTitle": "authorizeTransactionOnline When merchant config is not exist, it should return 409/-112",
              "timedOut": false,
              "duration": 337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteMerchantConfigs()\n    .then((delMerchConfigsRsp) => {\n        pxp.postAuthorizeTransactionOnline(financialReq)\n            .then((financialRsp) => {\n                logger.info(financialRsp.body);\n                expect(financialRsp).to.have.status(409);\n                expect(financialRsp.body.resultCode).equal(-112);\n                // save merchant config again\n                pxp.postMerchantConfigs(merchConfigsReq)\n                    .then((postMerchConfigsRsp) => {\n                        expect(postMerchConfigsRsp).to.have.status(204);\n                        done();\n                    })\n                    .catch((postMerchConfigsErr) => {\n                        done(postMerchConfigsErr);\n                    });\n            })\n            .catch((financialErr) => {\n                done(financialErr);\n            });\n    })\n    .catch((delMerchConfigsErr) => {\n        done(delMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "d284bfbe-2d68-438c-9664-5d970b2b1ae8",
              "parentUUID": "07192650-ce4b-4d17-b844-b30806db14de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3e3589c-b013-4a43-8f32-6e38284382d9",
            "a172b9d6-0d60-4ae0-a284-d0cf2081c08c",
            "9bae3817-5968-4235-a1ff-36189113deb3",
            "43d944cd-88e0-4924-8e7c-fd6815e7dbb4",
            "d65ef58a-d392-4588-97f0-28367eeb1867",
            "616dd85e-243b-41e6-9ac7-afb8b8e01835",
            "3aa50b76-febb-4453-bebd-982636ca2946",
            "b1548e50-9ec3-4d00-9244-44e6f1a20419",
            "591a617b-e411-43c7-ac2b-8d419cb9b693",
            "5838b42e-1c5f-4cf4-a729-0e652720e0f5",
            "e642c9b5-50c8-47e4-a9f5-2237ab7af3fc",
            "3a1df585-fc0c-4f51-8fe4-19114f2ef999",
            "77fcbc52-b280-4be6-9dac-cd2de57b94d3",
            "d284bfbe-2d68-438c-9664-5d970b2b1ae8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23083,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "12f7c32e-f48e-4321-852b-46becd7d5dec",
          "title": "approveAuthorizedTransaction",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\4_approveAuthorizedTransaction.spec.js",
          "file": "\\test\\4_approveAuthorizedTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "approveAuthorizedTransaction \"before each\" hook",
              "timedOut": false,
              "duration": 542,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        // console.log(count);\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    //console.log(\"Before Each Done\");\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            //console.log(\"Before Each Done\");\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "b26d5243-94eb-4471-ac4b-e93c37beefdb",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "IP-T70 - When successful, ApproveAuthorizedTransaction should return 204",
              "fullTitle": "approveAuthorizedTransaction IP-T70 - When successful, ApproveAuthorizedTransaction should return 204",
              "timedOut": false,
              "duration": 2239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Starting IP-T70....\");\npxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        expect(financialRsp).to.have.status(200);\n        var refNum = financialRsp.body.retrievalReferenceNumber;\n        var responseCode = financialRsp.body.responseCode;\n        const aprvReq = {\n            retrievalReferenceNumber: refNum,\n        };\n        console.log(responseCode);\n        if (responseCode === \"00\") {\n            pxp.postApproveAuthorizedTransaction(aprvReq)\n                .then((approveRsp) => {\n                    logger.info(approveRsp.body);\n                    expect(approveRsp).to.have.status(204);\n                    done();\n                })\n                .catch((approveErr) => {\n                    done(approveErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "c150df6f-3548-4c2e-b535-48584a7ab840",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T71 - When request contains unknown key, ApproveAuthorizedTransaction should return 422",
              "fullTitle": "approveAuthorizedTransaction IP-T71 - When request contains unknown key, ApproveAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction({\n    retrievalRefeerenceNumber: \"700000123456\",\n})\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(422);\n        expect(approveRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "00751752-f923-439d-84ac-f2b4247bd300",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T74 - When mandatory data element in Json is missing, ApproveAuthorizedTransaction should return 422",
              "fullTitle": "approveAuthorizedTransaction IP-T74 - When mandatory data element in Json is missing, ApproveAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction({\n    terminalId: \"700000123456\",\n})\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(422);\n        expect(approveRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "0a6ad1b2-f150-4ef1-9ec4-09bc14406680",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T89 - When retrival number is less than MinimumLength, ApproveAuthorizedTransaction should return 422",
              "fullTitle": "approveAuthorizedTransaction IP-T89 - When retrival number is less than MinimumLength, ApproveAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction({\n    terminalId: \"70000012345\",\n})\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(422);\n        expect(approveRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "32aa4e67-b1c2-4625-91d4-5ba5fa51208b",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T90 - When retrival number length is more than MaxLength, ApproveAuthorizedTransaction should return 422",
              "fullTitle": "approveAuthorizedTransaction IP-T90 - When retrival number length is more than MaxLength, ApproveAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction({\n    terminalId: \"7000001234567\",\n})\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(422);\n        expect(approveRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "3940fa17-a1d4-44e2-92dd-9461835debc5",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T91 - When retrival number is not string, ApproveAuthorizedTransaction should return 422",
              "fullTitle": "approveAuthorizedTransaction IP-T91 - When retrival number is not string, ApproveAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction({\n    terminalId: 700000123456,\n})\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(422);\n        expect(approveRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "f8ee5bdb-cef3-43ab-928b-0824b8cf1ff3",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T75 - When transaction is not exist, ApproveAuthorizedTransaction should return 404",
              "fullTitle": "approveAuthorizedTransaction IP-T75 - When transaction is not exist, ApproveAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction(voidTransReq)\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(404);\n        expect(approveRsp.body.resultCode).equal(-101);\n        done();\n    })\n    .catch((approveErr) => {\n        done(approveErr);\n    });",
              "err": {},
              "uuid": "ef185d56-b810-4e72-adaa-0af74459cc48",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, it should return 404",
              "fullTitle": "approveAuthorizedTransaction When bad request, it should return 404",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postApproveAuthorizedTransaction(\n    voidTransReq,\n    \"/approveeAuthorizedTransaction\"\n)\n    .then((approveRsp) => {\n        logger.info(approveRsp.body);\n        expect(approveRsp).to.have.status(404);\n        expect(approveRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "a6d7e3f0-e715-4ba7-aeed-cc7108b3aacf",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When 30s timeout, ApproveAuthorizedTransaction should return 404",
              "fullTitle": "approveAuthorizedTransaction When 30s timeout, ApproveAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 37349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(40000);\npxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        expect(financialRsp).to.have.status(200);\n        var refNum = financialRsp.body.retrievalReferenceNumber;\n        var responseCode = financialRsp.body.responseCode;\n        const aprvReq = {\n            retrievalReferenceNumber: refNum,\n        };\n        console.log(responseCode);\n        if (responseCode === \"00\") {\n            setTimeout(function () {\n                pxp.postApproveAuthorizedTransaction(aprvReq)\n                    .then((approveRsp) => {\n                        logger.info(approveRsp.body);\n                        expect(approveRsp).to.have.status(404);\n                        expect(approveRsp.body.resultCode).equal(-124);\n                        done();\n                    })\n                    .catch((approveErr) => {\n                        done(approveErr);\n                    });\n            }, 35000); // give 1 second extra\n        } else {\n            done();\n        }\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "099d67aa-450c-4a60-bdb9-b64bf86c8d37",
              "parentUUID": "12f7c32e-f48e-4321-852b-46becd7d5dec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c150df6f-3548-4c2e-b535-48584a7ab840",
            "00751752-f923-439d-84ac-f2b4247bd300",
            "0a6ad1b2-f150-4ef1-9ec4-09bc14406680",
            "32aa4e67-b1c2-4625-91d4-5ba5fa51208b",
            "3940fa17-a1d4-44e2-92dd-9461835debc5",
            "f8ee5bdb-cef3-43ab-928b-0824b8cf1ff3",
            "ef185d56-b810-4e72-adaa-0af74459cc48",
            "a6d7e3f0-e715-4ba7-aeed-cc7108b3aacf",
            "099d67aa-450c-4a60-bdb9-b64bf86c8d37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 41426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "f3199059-7be8-412d-90eb-33ea7c8bc788",
          "title": "reverseAuthorizedTransaction",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\5_reverseAuthorizedTransaction.spec.js",
          "file": "\\test\\5_reverseAuthorizedTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "reverseAuthorizedTransaction \"before each\" hook",
              "timedOut": false,
              "duration": 112,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount().then((offlineRsp)=>{\n    count = offlineRsp.body.transactionCount;\n    if(count>0){\n        pxp.deleteOfflineTransactionsPosition(count).then((offlineRsp) => {\n            done();\n        }).catch((offlineRspErr)=>{done(offlineRspErr)});                        \n    }else{\n        done();\n    }\n}).catch((offlineRspErr)=>{done(offlineRspErr)});",
              "err": {},
              "uuid": "54085970-531a-434b-9f96-e32835cbe5e0",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "IP-T63 - When successful, ReverseAuthorizedTransaction should return 200",
              "fullTitle": "reverseAuthorizedTransaction IP-T63 - When successful, ReverseAuthorizedTransaction should return 200",
              "timedOut": false,
              "duration": 2591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(financialReq).then((financialRsp)=>{\n    console.log(financialRsp.body);\n   // expect(financialRsp).to.have.status(200);\n    var refNum=financialRsp.body.retrievalReferenceNumber;\n    var amt = financialRsp.body.amount;\n    var responseCode = financialRsp.body.responseCode;\n    const revReq ={\n        retrievalReferenceNumber:refNum,\n        amount: amt\n    };\n    const aprvReq ={\n        retrievalReferenceNumber:refNum\n    }\n    logger.info(responseCode);\n     if(responseCode === '00'){\n        pxp.postApproveAuthorizedTransaction(aprvReq).then((approveRsp)=>{\n            expect(approveRsp).to.have.status(204);\n            pxp.postReverseAuthorizedTransaction(revReq).then((reverseRsp)=>{\n                //console.log(reverseRsp.body);\n                logger.info(reverseRsp.body);\n                expect(reverseRsp).to.have.status(200);\n                done();\n            }).catch((reverseErr)=>{done(reverseErr)});\n        }).catch((approveErr)=>{done(approveErr)});                \n     }else{\n         done();\n     }\n}).catch((financialErr)=>{done(financialErr)});",
              "err": {},
              "uuid": "4ffb2a7f-39b7-45ab-b78e-6cdbf4e7f028",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP -T202 - When successful, ReverseAuthorizedTransaction response should have valid schema",
              "fullTitle": "reverseAuthorizedTransaction IP -T202 - When successful, ReverseAuthorizedTransaction response should have valid schema",
              "timedOut": false,
              "duration": 3285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(financialReq).then((financialRsp)=>{\n    expect(financialRsp).to.have.status(200);\n    var refNum=financialRsp.body.retrievalReferenceNumber;\n    var amt = financialRsp.body.amount;\n    var responseCode = financialRsp.body.responseCode;\n    const revReq ={\n        retrievalReferenceNumber:refNum,\n        amount: amt\n    }\n    const aprvReq ={\n        retrievalReferenceNumber:refNum\n    }\n    logger.info(responseCode);\n    if(responseCode === '00'){\n        pxp.postApproveAuthorizedTransaction(aprvReq).then((approveRsp)=>{\n            expect(approveRsp).to.have.status(204);\n            pxp.postReverseAuthorizedTransaction(revReq).then((reverseRsp)=>{\n                logger.info(reverseRsp.body);\n                expect(reverseRsp).to.have.status(200);\n                expect(reverseRsp.body).to.be.jsonSchema(reverseAuthorizedTranRspSchema);\n                done();\n            }).catch((reverseErr)=>{done(reverseErr)});\n        }).catch((approveErr)=>{done(approveErr)});\n    }else{\n        done();\n    }\n}).catch((financialErr)=>{done(financialErr)});",
              "err": {},
              "uuid": "e233f792-b4ab-40f9-b8df-d28d04a17866",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When amount only successful, ReverseAuthorizedTransaction should return 200",
              "fullTitle": "reverseAuthorizedTransaction When amount only successful, ReverseAuthorizedTransaction should return 200",
              "timedOut": false,
              "duration": 3484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = '000000000007';\npxp.postAuthorizeTransactionOnline(financialReq).then((financialRsp)=>{\n    console.log(financialRsp.body);\n   // expect(financialRsp).to.have.status(200);\n    var refNum=financialRsp.body.retrievalReferenceNumber;\n    var amt = financialRsp.body.amount;\n    var responseCode = financialRsp.body.responseCode;\n    console.log(amt);\n    console.log(refNum);\n    const revReq ={\n        amount: amt\n    };\n    const aprvReq ={\n        retrievalReferenceNumber:refNum\n    }\n    console.log(responseCode);\n     if(responseCode === '00'){\n        pxp.postApproveAuthorizedTransaction(aprvReq).then((approveRsp)=>{\n            expect(approveRsp).to.have.status(204);\n            pxp.postReverseAuthorizedTransaction(revReq).then((reverseRsp)=>{\n                logger.info(reverseRsp.body);\n                expect(reverseRsp).to.have.status(200);\n                done();\n            }).catch((reverseErr)=>{done(reverseErr)});\n        }).catch((approveErr)=>{done(approveErr)});                \n     }else{\n         done();\n     }\n}).catch((financialErr)=>{done(financialErr)});",
              "err": {},
              "uuid": "9e7f2e33-7439-4ad2-a5ca-5244a7838cd3",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When Reference Number only successful, ReverseAuthorizedTransaction should return 200",
              "fullTitle": "reverseAuthorizedTransaction When Reference Number only successful, ReverseAuthorizedTransaction should return 200",
              "timedOut": false,
              "duration": 4437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = '000000000009';\npxp.postAuthorizeTransactionOnline(financialReq).then((financialRsp)=>{\n    console.log(financialRsp.body);\n   // expect(financialRsp).to.have.status(200);\n    var refNum=financialRsp.body.retrievalReferenceNumber;\n    var amt = financialRsp.body.amount;\n    var responseCode = financialRsp.body.responseCode;\n    console.log(amt);\n    console.log(refNum);\n    const revReq ={\n        retrievalReferenceNumber:refNum\n    };\n    const aprvReq ={\n        retrievalReferenceNumber:refNum\n    }\n    console.log(responseCode);\n     if(responseCode === '00'){\n        pxp.postApproveAuthorizedTransaction(aprvReq).then((approveRsp)=>{\n            expect(approveRsp).to.have.status(204);\n            pxp.postReverseAuthorizedTransaction(revReq).then((reverseRsp)=>{\n                logger.info(reverseRsp.body);\n                expect(reverseRsp).to.have.status(200);\n                done();\n            }).catch((reverseErr)=>{done(reverseErr)});\n        }).catch((approveErr)=>{done(approveErr)});                \n     }else{\n         done();\n     }\n}).catch((financialErr)=>{done(financialErr)});",
              "err": {},
              "uuid": "fa74ba84-ab9d-478f-b1fe-5cc452e1c76c",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T64 - When request contains unknown key, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T64 - When request contains unknown key, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    retrievalRefeerenceNumber:\"700000123456\",\n    amont: \"123456789012\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done();\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "c4098b98-21c8-4a94-82ef-fa7c8248f537",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T83 - When amount is less than MinimumLength, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T83 - When amount is less than MinimumLength, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: \"00000000002\",\n    retrievalReferenceNumber:\"700000123456\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "53e58676-d829-4724-aaed-40d2c0d1c5e3",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T84 - When amount length is more than MaxLength, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T84 - When amount length is more than MaxLength, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: \"0000000000213\",\n    retrievalReferenceNumber:\"700000123456\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "2b5c1da7-b31b-4ad6-8a16-523716bbe449",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T85 - When amount is not string, ReverseAuthorizedTransaction should return  422",
              "fullTitle": "reverseAuthorizedTransaction IP-T85 - When amount is not string, ReverseAuthorizedTransaction should return  422",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: 000000000021,\n    retrievalReferenceNumber:\"700000123456\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "9f600c60-1775-4cae-a586-217b146bfa35",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T86 - When retrival number is less than MinimumLength, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T86 - When retrival number is less than MinimumLength, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: \"000000000021\",\n    retrievalReferenceNumber:\"70000012345\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "e0b0b2ad-cbfe-4e15-a91c-e021efff7098",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T87 - When retrival number length is more than MaxLength, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T87 - When retrival number length is more than MaxLength, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: \"000000000021\",\n    retrievalReferenceNumber:\"7000001234567\"\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "41c997e1-b5e0-403d-99d1-22d8ecdee3ef",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T88 - When retrival number is not string, ReverseAuthorizedTransaction should return 422",
              "fullTitle": "reverseAuthorizedTransaction IP-T88 - When retrival number is not string, ReverseAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction({\n    amount: \"000000000021\",\n    retrievalReferenceNumber:700000123456\n}).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(422);\n    expect(reverseRsp.body.resultCode).equal(-104);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "f241716e-c7a9-4c0c-a129-dd3a2530bc30",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T65 - When merchant config is not exist, ReverseAuthorizedTransaction should return 409",
              "fullTitle": "reverseAuthorizedTransaction IP-T65 - When merchant config is not exist, ReverseAuthorizedTransaction should return 409",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteMerchantConfigs().then((delMerchConfigsRsp) => {      \n    pxp.postReverseAuthorizedTransaction(reverseTransReq).then((reverseRsp)=>{\n        logger.info(reverseRsp.body);\n        expect(reverseRsp).to.have.status(409);\n        expect(reverseRsp.body.resultCode).equal(-112);\n        // save merchant config again\n        pxp.postMerchantConfigs(merchConfigsReq).then((postMerchConfigsRsp) => {\n            expect(postMerchConfigsRsp).to.have.status(204);\n            done()\n        }).catch((postMerchConfigsErr)=>{done(postMerchConfigsErr)});\n    }).catch((reverseErr)=>{done(reverseErr)});\n}).catch((delMerchConfigsErr)=>{done(delMerchConfigsErr)});",
              "err": {},
              "uuid": "e5814cf4-3199-4d9d-a57c-5ad2095b04d6",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T69 - When transaction is not exist, ReverseAuthorizedTransaction should return 404",
              "fullTitle": "reverseAuthorizedTransaction IP-T69 - When transaction is not exist, ReverseAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction(reverseTransReq).then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(404);\n    expect(reverseRsp.body.resultCode).equal(-116);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "ea4a64e1-9117-436f-946c-5647df7c90fe",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, ReverseAuthorizedTransaction should return 404",
              "fullTitle": "reverseAuthorizedTransaction When bad request, ReverseAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postReverseAuthorizedTransaction(reverseTransReq,'reverseeAuthorizedTransaction').then((reverseRsp)=>{\n    logger.info(reverseRsp.body);\n    expect(reverseRsp).to.have.status(404);\n    expect(reverseRsp.body.resultCode).equal(-100);\n    done()\n}).catch((reverseErr)=>{done(reverseErr)});",
              "err": {},
              "uuid": "8167643b-8b8c-4e70-9516-cbfe85a9aa5d",
              "parentUUID": "f3199059-7be8-412d-90eb-33ea7c8bc788",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ffb2a7f-39b7-45ab-b78e-6cdbf4e7f028",
            "e233f792-b4ab-40f9-b8df-d28d04a17866",
            "9e7f2e33-7439-4ad2-a5ca-5244a7838cd3",
            "fa74ba84-ab9d-478f-b1fe-5cc452e1c76c",
            "c4098b98-21c8-4a94-82ef-fa7c8248f537",
            "53e58676-d829-4724-aaed-40d2c0d1c5e3",
            "2b5c1da7-b31b-4ad6-8a16-523716bbe449",
            "9f600c60-1775-4cae-a586-217b146bfa35",
            "e0b0b2ad-cbfe-4e15-a91c-e021efff7098",
            "41c997e1-b5e0-403d-99d1-22d8ecdee3ef",
            "f241716e-c7a9-4c0c-a129-dd3a2530bc30",
            "e5814cf4-3199-4d9d-a57c-5ad2095b04d6",
            "ea4a64e1-9117-436f-946c-5647df7c90fe",
            "8167643b-8b8c-4e70-9516-cbfe85a9aa5d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16045,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "124eeee4-ea54-46bb-bb87-093ea43a5917",
          "title": "voidAuthorizedTransaction",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\6_voidAuthorizedTransaction.spec.js",
          "file": "\\test\\6_voidAuthorizedTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "voidAuthorizedTransaction \"before each\" hook",
              "timedOut": false,
              "duration": 181,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "daa5272f-a932-40d4-9191-39eb5e03e5cc",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "IP-T77 - When successful, VoidAuthorizedTransaction should return 204",
              "fullTitle": "voidAuthorizedTransaction IP-T77 - When successful, VoidAuthorizedTransaction should return 204",
              "timedOut": false,
              "duration": 2166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        console.log(financialRsp.body);\n        expect(financialRsp).to.have.status(200);\n        var refNum = financialRsp.body.retrievalReferenceNumber;\n        var responseCode = financialRsp.body.responseCode;\n        const voidReq = {\n            retrievalReferenceNumber: refNum,\n        };\n        console.log(responseCode);\n        if (responseCode === \"00\") {\n            pxp.postVoidAuthorizedTransaction(voidReq)\n                .then((voidRsp) => {\n                    //console.log(voidRsp.body);\n                    logger.info(voidRsp.body);\n                    expect(voidRsp).to.have.status(204);\n                    done();\n                })\n                .catch((voidErr) => {\n                    done(voidErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "1f3d7160-92ef-46b1-b1fa-aaa116c3c9d8",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T78 - When request contains unknown key, VoidAuthorizedTransaction should return 422",
              "fullTitle": "voidAuthorizedTransaction IP-T78 - When request contains unknown key, VoidAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction({\n    retrievalRefeerenceNumber: \"700000123456\",\n})\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(422);\n        expect(voidRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "d5604df2-75b5-43e5-ba6c-a2145b3b728f",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When mandatory key is missing in the request, VoidAuthorizedTransaction should return 422",
              "fullTitle": "voidAuthorizedTransaction When mandatory key is missing in the request, VoidAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction({\n    terminalId: \"700000123456\",\n})\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(422);\n        expect(voidRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "8de1d9b2-1a7d-4348-9974-d5ccb7333638",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T92 - When retrival number is less than MinimumLength, VoidAuthorizedTransaction should return 422",
              "fullTitle": "voidAuthorizedTransaction IP-T92 - When retrival number is less than MinimumLength, VoidAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 516,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction({\n    retrievalReferenceNumber: \"70000012345\",\n})\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(422);\n        expect(voidRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "4df6d033-a179-4b2a-afc5-0f6e5bb550e4",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T93 - When retrival number length is more than MaxLength, VoidAuthorizedTransaction should return 422",
              "fullTitle": "voidAuthorizedTransaction IP-T93 - When retrival number length is more than MaxLength, VoidAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction({\n    retrievalReferenceNumber: \"7000001234567\",\n})\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(422);\n        expect(voidRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "9ff85472-92ac-4528-9863-729da4e57474",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T94 - When retrival number is not string, VoidAuthorizedTransaction should return 422",
              "fullTitle": "voidAuthorizedTransaction IP-T94 - When retrival number is not string, VoidAuthorizedTransaction should return 422",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction({\n    retrievalReferenceNumber: 700000123456,\n})\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(422);\n        expect(voidRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "ed8033b2-e179-4a5d-b6f5-4df9ecb34293",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T80 - When transaction is not exist, VoidAuthorizedTransaction should return 404",
              "fullTitle": "voidAuthorizedTransaction IP-T80 - When transaction is not exist, VoidAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction(voidTransReq)\n    .then((voidRsp) => {\n        //console.log(voidRsp.body);\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(404);\n        expect(voidRsp.body.resultCode).equal(-116);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "c0a96080-cff3-4659-99ff-244a905f4ae4",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, VoidAuthorizedTransaction should return 404",
              "fullTitle": "voidAuthorizedTransaction When bad request, VoidAuthorizedTransaction should return 404",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postVoidAuthorizedTransaction(\n    voidTransReq,\n    \"/voiidAuthorizedTransaction\"\n)\n    .then((voidRsp) => {\n        logger.info(voidRsp.body);\n        expect(voidRsp).to.have.status(404);\n        expect(voidRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((voidErr) => {\n        done(voidErr);\n    });",
              "err": {},
              "uuid": "53cddd2c-f44f-4a64-9660-67e2d43b54e2",
              "parentUUID": "124eeee4-ea54-46bb-bb87-093ea43a5917",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f3d7160-92ef-46b1-b1fa-aaa116c3c9d8",
            "d5604df2-75b5-43e5-ba6c-a2145b3b728f",
            "8de1d9b2-1a7d-4348-9974-d5ccb7333638",
            "4df6d033-a179-4b2a-afc5-0f6e5bb550e4",
            "9ff85472-92ac-4528-9863-729da4e57474",
            "ed8033b2-e179-4a5d-b6f5-4df9ecb34293",
            "c0a96080-cff3-4659-99ff-244a905f4ae4",
            "53cddd2c-f44f-4a64-9660-67e2d43b54e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
          "title": "authorizeTransactionOffline",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\7_offlineTransaction.spec.js",
          "file": "\\test\\7_offlineTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "authorizeTransactionOffline \"before all\" hook",
              "timedOut": false,
              "duration": 140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        done();\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "83188ed1-87cc-4921-b286-16a3d1597d26",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "authorizeTransactionOffline \"after each\" hook",
              "timedOut": false,
              "duration": 270,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "20de15d0-523d-4c09-b04b-dfd5ee42b053",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T5 - When offline Advice transaction is successful, it should return 200",
              "fullTitle": "authorizeTransactionOffline IP-T5 - When offline Advice transaction is successful, it should return 200",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postMerchantConfigs(merchConfigsReq)\n    .then((postMerchConfigsRsp) => {\n        //expect(postMerchConfigsRsp).to.have.status(204)\n        pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n            .then((offlineRsp) => {\n                logger.info(offlineRsp.body);\n                expect(offlineRsp).to.have.status(200);\n                done();\n            })\n            .catch((offlineRspErr) => {\n                done(offlineRspErr);\n            });\n    })\n    .catch((postMerchConfigsErr) => {\n        done(postMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "64ecadce-6915-4908-8815-b10bbc98afd7",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T6 - When advice request contains unknown key, it should return 422",
              "fullTitle": "authorizeTransactionOffline IP-T6 - When advice request contains unknown key, it should return 422",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOffline({\n    transactionType: \"ADVICE\",\n    paymentInfo: {\n        procesingCode: \"010000\",\n        amount: \"000000050941\",\n        localDateAndTime: \"200324140228\",\n        dateExpiration: \"2406\",\n        merchantType: 9999,\n        posEntryMode: 1,\n        pinEntryCapability: 1,\n        posConditionCode: 0,\n        storeId: \"301020145745214\",\n        transactionTags:\n            \"K1020FFF79855F13210E000ADK2020FFF79855F23210E000ADK3020FFF79855F33210E000ADRR0011CI006111111ER012123456789033ID0012IC0013DC0013CV0012EI00255\",\n        currencyCode: 752,\n        encryptedData: \"PA00165342439926176377\",\n    },\n})\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(422);\n        //console.log(offlineRsp.body);\n        expect(offlineRsp.body.resultCode).equal(-104);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "fe34ab3a-5b8d-4e74-9982-b2700f0ef78e",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, it should return 404",
              "fullTitle": "authorizeTransactionOffline When bad request, it should return 404",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOffline(\n    offlineAdviceReq,\n    \"/authorizeTransactionOfline\"\n)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "24350616-2f72-470f-93a0-62d00f7d488b",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T12 - When successful transaction, the response should have valid schema",
              "fullTitle": "authorizeTransactionOffline IP-T12 - When successful transaction, the response should have valid schema",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n    .then((offlineRsp) => {\n        //console.log(offlineRsp);\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(200);\n        expect(offlineRsp.body).to.be.jsonSchema(\n            postAuthorizeTransactionOfflineRspSchema\n        );\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "054c279b-5128-4f00-9396-6c710e9e0c78",
              "parentUUID": "2f99d7e4-136b-4f2e-8949-8ef375fda118",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64ecadce-6915-4908-8815-b10bbc98afd7",
            "fe34ab3a-5b8d-4e74-9982-b2700f0ef78e",
            "24350616-2f72-470f-93a0-62d00f7d488b",
            "054c279b-5128-4f00-9396-6c710e9e0c78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "1c555f9c-b314-49bd-a993-d9a098092461",
          "title": "offlineTransactions-Count",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\7_offlineTransaction.spec.js",
          "file": "\\test\\7_offlineTransaction.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "offlineTransactions-Count \"after each\" hook",
              "timedOut": false,
              "duration": 364,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "a9aa19e0-a4af-4602-9bad-8efcba7bb21a",
              "parentUUID": "1c555f9c-b314-49bd-a993-d9a098092461",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T17 - When offlineTransaction Count is successful, it should return 200",
              "fullTitle": "offlineTransactions-Count IP-T17 - When offlineTransaction Count is successful, it should return 200",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n       // console.log(offlineRsp.body);\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(200);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "be2af655-d93f-4014-8973-4e4952e9d969",
              "parentUUID": "1c555f9c-b314-49bd-a993-d9a098092461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T189 - When offline transaction Count is successful, it response should have valid schema",
              "fullTitle": "offlineTransactions-Count IP-T189 - When offline transaction Count is successful, it response should have valid schema",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(200);\n        expect(offlineRsp.body).to.be.jsonSchema(countRspSchema);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "b60dd0cf-0908-413c-868f-e402cfef2bab",
              "parentUUID": "1c555f9c-b314-49bd-a993-d9a098092461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, offline Count should return 404",
              "fullTitle": "offlineTransactions-Count When bad request, offline Count should return 404",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount(\"offlineTransactions/counnt\")\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "5efb4834-8cb5-41f8-bea5-22dc7d2d965c",
              "parentUUID": "1c555f9c-b314-49bd-a993-d9a098092461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T121 - When authorizeTransactionOffline is successful, it should increase the total count",
              "fullTitle": "offlineTransactions-Count IP-T121 - When authorizeTransactionOffline is successful, it should increase the total count",
              "timedOut": false,
              "duration": 498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(200);\n        var count = offlineRsp.body.transactionCount;\n        pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n            .then((offlineRsp) => {\n                //expect(offlineRsp).to.have.status(200);\n                pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        logger.info(offlineRsp.body);\n                        expect(offlineRsp).to.have.status(200);\n                        expect(\n                            Number(offlineRsp.body.transactionCount)\n                        ).to.equal(Number(count) + 1);\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n            })\n            .catch((offlineRspErr) => {\n                done(offlineRspErr);\n            });\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "a848c528-558f-4332-81ff-ac0ce300d399",
              "parentUUID": "1c555f9c-b314-49bd-a993-d9a098092461",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be2af655-d93f-4014-8973-4e4952e9d969",
            "b60dd0cf-0908-413c-868f-e402cfef2bab",
            "5efb4834-8cb5-41f8-bea5-22dc7d2d965c",
            "a848c528-558f-4332-81ff-ac0ce300d399"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 885,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "d01d6537-2aed-4ce3-a381-744115f586f4",
          "title": "offlineTransactions-Position",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\7_offlineTransaction.spec.js",
          "file": "\\test\\7_offlineTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "offlineTransactions-Position \"before each\" hook",
              "timedOut": false,
              "duration": 286,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n    .then((offlineRsp) => {\n        //console.log(offlineRsp.body);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "17fa7d0f-61aa-45ce-928b-55fdcce93416",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "offlineTransactions-Position \"after each\" hook",
              "timedOut": false,
              "duration": 179,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "8199d761-6407-4e11-ac2f-99ba0e44385b",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T22 - When GET offline Transaction successful, it should return 200",
              "fullTitle": "offlineTransactions-Position IP-T22 - When GET offline Transaction successful, it should return 200",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(1)\n    .then((offlineRsp) => {\n        //console.log(offlineRsp.body);\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(200);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "515fc094-9230-4817-90ce-28af696789ad",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T27 - When GET offline Transaction successful, the response should have valid schema",
              "fullTitle": "offlineTransactions-Position IP-T27 - When GET offline Transaction successful, the response should have valid schema",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(1)\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(200);\n        //console.log(offlineRsp.body);\n        logger.info(offlineRsp.body);\n        expect(offlineRsp.body).to.be.jsonSchema(\n            getOfflinePositionRspSchema\n        );\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "bfe49a23-709c-4171-a54c-2b71adab5f6e",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T28 - when position = count, GET offline Transaction should return 200",
              "fullTitle": "offlineTransactions-Position IP-T28 - when position = count, GET offline Transaction should return 200",
              "timedOut": false,
              "duration": 623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        var count = offlineRsp.body.transactionCount;\n        console.log(\"GET position = count-->\" + count);\n        if (count > 0) {\n            pxp.getOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    logger.info(offlineRsp.body);\n                    expect(offlineRsp).to.have.status(200);\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "30c62586-9ef4-4130-9a36-56f02d7a226d",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, GET offline Transaction should return 404",
              "fullTitle": "offlineTransactions-Position When bad request, GET offline Transaction should return 404",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(1, \"offflineTransactions/\")\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "577056e9-b690-4f83-8825-9b51cf46db64",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T23 - When position>count, GET offline Transaction should return 404",
              "fullTitle": "offlineTransactions-Position IP-T23 - When position>count, GET offline Transaction should return 404",
              "timedOut": false,
              "duration": 269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(100)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        console.log(offlineRsp.body);\n        expect(offlineRsp.body.resultCode).equal(-114);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "444ed309-f9a5-4b91-a6cb-8fbb281a96fc",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T24 - When negative position is used, GET offline Transaction should return 404",
              "fullTitle": "offlineTransactions-Position IP-T24 - When negative position is used, GET offline Transaction should return 404",
              "timedOut": false,
              "duration": 148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(-1)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-114);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "481b4a5f-efd0-4814-974e-5b8681c2658a",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T25 - When position = 0, GET offline Transaction should return 404",
              "fullTitle": "offlineTransactions-Position IP-T25 - When position = 0, GET offline Transaction should return 404",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsPosition(0)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-114);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "d1baa121-9512-42cb-ab32-5d1a0c900940",
              "parentUUID": "d01d6537-2aed-4ce3-a381-744115f586f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "515fc094-9230-4817-90ce-28af696789ad",
            "bfe49a23-709c-4171-a54c-2b71adab5f6e",
            "30c62586-9ef4-4130-9a36-56f02d7a226d",
            "577056e9-b690-4f83-8825-9b51cf46db64",
            "444ed309-f9a5-4b91-a6cb-8fbb281a96fc",
            "481b4a5f-efd0-4814-974e-5b8681c2658a",
            "d1baa121-9512-42cb-ab32-5d1a0c900940"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1512,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
          "title": "offlineTransactions-Delete",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\7_offlineTransaction.spec.js",
          "file": "\\test\\7_offlineTransaction.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "offlineTransactions-Delete \"before each\" hook",
              "timedOut": false,
              "duration": 217,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n    .then((offlineRsp) => {\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "1e1e285f-5220-4bdd-b47e-a32ca2654ecb",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "offlineTransactions-Delete \"after each\" hook",
              "timedOut": false,
              "duration": 436,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "81b14ac4-8133-4b7b-bb1a-5ef132699b53",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "IP-T29 - When DELETE offline Transaction successful, delete offline transaction should return 204",
              "fullTitle": "offlineTransactions-Delete IP-T29 - When DELETE offline Transaction successful, delete offline transaction should return 204",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteOfflineTransactionsPosition(1)\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(204);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "a9eae3be-5947-438e-9cb8-b137b8abddee",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T34 - When position = count, DELETE offline transaction should return 204",
              "fullTitle": "offlineTransactions-Delete IP-T34 - When position = count, DELETE offline transaction should return 204",
              "timedOut": false,
              "duration": 628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        var count = offlineRsp.body.transactionCount;\n        console.log(\"DELETE position = count-->\" + count);\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    logger.info(offlineRsp.body);\n                    expect(offlineRsp).to.have.status(204);\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "ca8e15b5-e032-43a6-926d-c68d31606d67",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When bad request, DELETE offline transaction should return 404",
              "fullTitle": "offlineTransactions-Delete When bad request, DELETE offline transaction should return 404",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteOfflineTransactionsPosition(1, \"offflineTransactions/\")\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-100);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "7475a3aa-d48c-49da-a638-ae43b0cd555b",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T30 - When incorrect position, DELETE offline transaction should return 404",
              "fullTitle": "offlineTransactions-Delete IP-T30 - When incorrect position, DELETE offline transaction should return 404",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteOfflineTransactionsPosition(100)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-114);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "4b9dddf2-83f6-44c2-8911-1697e143ed9b",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "IP-T33 - When negative position, DELETE offline transaction should return 404",
              "fullTitle": "offlineTransactions-Delete IP-T33 - When negative position, DELETE offline transaction should return 404",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteOfflineTransactionsPosition(-1)\n    .then((offlineRsp) => {\n        logger.info(offlineRsp.body);\n        expect(offlineRsp).to.have.status(404);\n        expect(offlineRsp.body.resultCode).equal(-114);\n        done();\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "9957346a-2228-4b50-8a04-29cb2fcb5c60",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When position > count, DELETE offline transaction should return 404",
              "fullTitle": "offlineTransactions-Delete When position > count, DELETE offline transaction should return 404",
              "timedOut": false,
              "duration": 491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        expect(offlineRsp).to.have.status(200);\n        var count = offlineRsp.body.transactionCount;\n        pxp.deleteOfflineTransactionsPosition(Number(count) + 1)\n            .then((offlineRsp) => {\n                logger.info(offlineRsp.body);\n                expect(offlineRsp).to.have.status(404);\n                expect(offlineRsp.body.resultCode).equal(-114);\n                done();\n            })\n            .catch((offlineRspErr) => {\n                done(offlineRspErr);\n            });\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "29e63a70-11da-4d0d-81b1-afea2b97aa54",
              "parentUUID": "5e22d428-8f3f-4edd-aa00-012f5edde4e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9eae3be-5947-438e-9cb8-b137b8abddee",
            "ca8e15b5-e032-43a6-926d-c68d31606d67",
            "7475a3aa-d48c-49da-a638-ae43b0cd555b",
            "4b9dddf2-83f6-44c2-8911-1697e143ed9b",
            "9957346a-2228-4b50-8a04-29cb2fcb5c60",
            "29e63a70-11da-4d0d-81b1-afea2b97aa54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1707,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "316c7e7c-e59d-417f-b5c2-0fe27e159c70",
          "title": "authorizeTransactionFromOfflineQueue",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\7_offlineTransaction.spec.js",
          "file": "\\test\\7_offlineTransaction.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "authorizeTransactionFromOfflineQueue \"after each\" hook",
              "timedOut": false,
              "duration": 241,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "2076c540-7c4b-4546-81e7-d51349489710",
              "parentUUID": "316c7e7c-e59d-417f-b5c2-0fe27e159c70",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "When authorize from offlineQueue is successful, it should return 200",
              "fullTitle": "authorizeTransactionFromOfflineQueue When authorize from offlineQueue is successful, it should return 200",
              "timedOut": false,
              "duration": 2220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//offlineAdviceReq.paymentInfo.merchantType = 9999;\npxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n    .then((offlineAdviceRsp) => {\n        expect(offlineAdviceRsp).to.have.status(200);\n        pxp.postAuthorizeTransactionFromOfflineQueue()\n            .then((offlineRsp) => {\n                logger.info(offlineRsp.body);\n                expect(offlineRsp).to.have.status(200);\n                done();\n            })\n            .catch((offlineRspErr) => {\n                done(offlineRspErr);\n            });\n    })\n    .catch((offlineAdviceRspErr) => {\n        done(offlineAdviceRspErr);\n    });",
              "err": {},
              "uuid": "7e9be853-d586-4d2e-b639-64a244d7406a",
              "parentUUID": "316c7e7c-e59d-417f-b5c2-0fe27e159c70",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When authorize from offlineQueue is successful, the response should have valid schema",
              "fullTitle": "authorizeTransactionFromOfflineQueue When authorize from offlineQueue is successful, the response should have valid schema",
              "timedOut": false,
              "duration": 2185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// offlineAdviceReq.paymentInfo.merchantType = 9999;\n pxp.postAuthorizeTransactionOffline(offlineAdviceReq)\n     .then((offlineAdviceRsp) => {\n         //expect(offlineAdviceRsp).to.have.status(200);\n         pxp.postAuthorizeTransactionFromOfflineQueue()\n             .then((offlineRsp) => {\n                 logger.info(offlineRsp.body);\n                 expect(offlineRsp).to.have.status(200);\n                 expect(offlineRsp.body).to.be.jsonSchema(\n                     authorizeTransactionFromOfflineQueueRspSchema\n                 );\n                 done();\n             })\n             .catch((offlineRspErr) => {\n                 done(offlineRspErr);\n             });\n     })\n     .catch((offlineAdviceRspErr) => {\n         done(offlineAdviceRspErr);\n     });",
              "err": {},
              "uuid": "8d93dddb-9ef7-44b8-ad68-2bbdbdaa7bd7",
              "parentUUID": "316c7e7c-e59d-417f-b5c2-0fe27e159c70",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " When merchant config is not exist, authorize from offlineQueue should return 409",
              "fullTitle": "authorizeTransactionFromOfflineQueue  When merchant config is not exist, authorize from offlineQueue should return 409",
              "timedOut": false,
              "duration": 472,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.deleteMerchantConfigs()\n    .then((postMerchConfigsRsp) => {\n        //expect(postMerchConfigsRsp).to.have.status(204)\n        pxp.postAuthorizeTransactionFromOfflineQueue()\n            .then((offlineRsp) => {\n                logger.info(offlineRsp.body);\n                expect(offlineRsp).to.have.status(409);\n                expect(offlineRsp.body.resultCode).equal(-112);\n                // save merchant config again\n                pxp.postMerchantConfigs(merchConfigsReq)\n                    .then((postMerchConfigsRsp) => {\n                        expect(postMerchConfigsRsp).to.have.status(204);\n                        done();\n                    })\n                    .catch((postMerchConfigsErr) => {\n                        done(postMerchConfigsErr);\n                    });\n            })\n            .catch((offlineRspErr) => {\n                done(offlineRspErr);\n            });\n    })\n    .catch((delMerchConfigsErr) => {\n        done(delMerchConfigsErr);\n    });",
              "err": {},
              "uuid": "1ef4a660-2f76-4dbe-88e1-99099f009c59",
              "parentUUID": "316c7e7c-e59d-417f-b5c2-0fe27e159c70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e9be853-d586-4d2e-b639-64a244d7406a",
            "8d93dddb-9ef7-44b8-ad68-2bbdbdaa7bd7",
            "1ef4a660-2f76-4dbe-88e1-99099f009c59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4877,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "4cfe39d9-c080-448a-bb4c-648f996ee423",
          "title": "configuration",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\8_hostConfigs.spec.js",
          "file": "\\test\\8_hostConfigs.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "when configured using local/non-local host with https and client cert signed by PXRRS, getVersion should return 200",
              "fullTitle": "configuration when configured using local/non-local host with https and client cert signed by PXRRS, getVersion should return 200",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pxp.setConfig(true, true);\npxp.getVersion()\n    .then((resp) => {\n        console.log(resp.body);\n        expect(resp).to.have.status(200);\n        done();\n    })\n    .catch((err) => {\n        done(err);\n    });",
              "err": {},
              "uuid": "2e38356c-620c-4ff1-8ef2-97131336d27f",
              "parentUUID": "4cfe39d9-c080-448a-bb4c-648f996ee423",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e38356c-620c-4ff1-8ef2-97131336d27f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
          "title": "MITM testing",
          "fullFile": "C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\9_mitm.spec.js",
          "file": "\\test\\9_mitm.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "MITM testing \"before each\" hook",
              "timedOut": false,
              "duration": 342,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "32c16ec3-cfd2-477a-b3ad-59a1bc699d3f",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "MITM testing \"after all\" hook",
              "timedOut": false,
              "duration": 352,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var count = 0;\npxp.getOfflineTransactionsCount()\n    .then((offlineRsp) => {\n        count = offlineRsp.body.transactionCount;\n        if (count > 0) {\n            pxp.deleteOfflineTransactionsPosition(count)\n                .then((offlineRsp) => {\n                    done();\n                })\n                .catch((offlineRspErr) => {\n                    done(offlineRspErr);\n                });\n        } else {\n            done();\n        }\n    })\n    .catch((offlineRspErr) => {\n        done(offlineRspErr);\n    });",
              "err": {},
              "uuid": "61bbe096-dcd0-4fd4-a4b7-70ca84b31ed5",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "When network error occurs while receiving data from host, Network transaction should return -107/409 within 5+ connectiontimeout seconds",
              "fullTitle": "MITM testing When network error occurs while receiving data from host, Network transaction should return -107/409 within 5+ connectiontimeout seconds",
              "timedOut": false,
              "duration": 12259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "start = Date.now();\nntwrkMgtReq.paymentInfo.networkInformation = \"998\";\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\n pxp.postAuthorizeTransactionOnline(ntwrkMgtReq)\n     .then((ntwrkMgtRsp) => {\n         logger.info(ntwrkMgtRsp.body);\n         expect(ntwrkMgtRsp).to.have.status(409);\n         expect(ntwrkMgtRsp.body.resultCode).equal(-107);\n         end = Date.now();\n         diff = end - start;\n         logger.info(diff);\n         expect(diff).to.be.below(waitTime);\n         done();\n     })\n     .catch((ntwrkMgtErr) => {\n         done(ntwrkMgtErr);\n     });",
              "err": {},
              "uuid": "4762730f-8684-4506-8649-1f9eea1f4e07",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When recieving data from host timeout, Network transaction should return -107/409 within 5 + connectiontimeout seconds",
              "fullTitle": "MITM testing When recieving data from host timeout, Network transaction should return -107/409 within 5 + connectiontimeout seconds",
              "timedOut": false,
              "duration": 12193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "start = Date.now();\nntwrkMgtReq.paymentInfo.networkInformation = \"999\";\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\n pxp.postAuthorizeTransactionOnline(ntwrkMgtReq)\n     .then((ntwrkMgtRsp) => {\n         logger.info(ntwrkMgtRsp.body);\n         expect(ntwrkMgtRsp).to.have.status(409);\n         expect(ntwrkMgtRsp.body.resultCode).equal(-107);\n         end = Date.now();\n         diff = end - start;\n         logger.info(diff);\n         expect(diff).to.be.below(waitTime);\n         done();\n     })\n     .catch((ntwrkMgtErr) => {\n         done(ntwrkMgtErr);\n     });",
              "err": {},
              "uuid": "5c3f9c3a-3c73-4dee-bf75-fbef8f43881d",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When network error occurs while receiving data from host, Financial transaction should return -107/409 within 5 + connectiontimeout seconds",
              "fullTitle": "MITM testing When network error occurs while receiving data from host, Financial transaction should return -107/409 within 5 + connectiontimeout seconds",
              "timedOut": false,
              "duration": 12204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000998\";\nstart = Date.now();\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\npxp.postAuthorizeTransactionOnline(financialReq)\n.then((financialRsp)=>{\n    logger.info(financialRsp.body);\n    expect(financialRsp).to.have.status(409);\n    expect(financialRsp.body.resultCode).equal(-107);\n    logger.info(financialRsp.body);\n    current = Date.now();\n    diff = current - start;\n    expect(diff).to.be.below(waitTime);\n    done();\n}).catch((financialErr)=>{\n    done(financialErr);\n})",
              "err": {},
              "uuid": "adc7faa4-3276-417f-ac08-283d3798e76c",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When recieving data from host timeout, Financial transaction should return -107/409 within 5 + connectiontimeout seconds",
              "fullTitle": "MITM testing When recieving data from host timeout, Financial transaction should return -107/409 within 5 + connectiontimeout seconds",
              "timedOut": false,
              "duration": 13223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "start = Date.now();\nfinancialReq.paymentInfo.amount = \"000000000999\";\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\npxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp) => {\n        logger.info(financialRsp.body);\n        expect(financialRsp).to.have.status(409);\n        expect(financialRsp.body.resultCode).equal(-107);\n        end = Date.now();\n        diff = end - start;\n        logger.info(diff);\n        expect(diff).to.be.below(waitTime);\n        done();\n    })\n    .catch((financialErr) => {\n        done(financialErr);\n    });",
              "err": {},
              "uuid": "8d95f835-5b28-4114-b563-8b85c131490b",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When recieving data from host timeout, financial transaction should send Reversal Request within 5 + connectiontimeout seconds",
              "fullTitle": "MITM testing When recieving data from host timeout, financial transaction should send Reversal Request within 5 + connectiontimeout seconds",
              "timedOut": false,
              "duration": 13569,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000999\";\nstart = Date.now();\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\npxp.postAuthorizeTransactionOnline(financialReq)\n.then((financialRsp)=>{\n    logger.info(financialRsp.body);\n    current = Date.now();\n    diff = current - start;\n    expect(diff).to.be.below(1000+(merchConfigsReq.connectionTimeout*1000)); // verifying response time after connectionTimeOut\n    setTimeout(function(){\n        fs.readFile(responsePath,(err,data)=>{\n            if(err) throw err;\n            let responseData = JSON.parse(data);\n            logger.info(responseData.body);\n            var typeObj =JSON.parse( responseData[0]);\n            console.log(typeObj[\"type\"]);\n            expect(typeObj[\"type\"]).equal(\"0430\");\n            end = Date.now();\n            diff = end - start;\n            expect(diff).to.be.below(waitTime); //total reversal process time\n            done();                    \n        });\n    }, 4000); // waiting for reversal process to be finished, before read from file.\n}).catch((financialErr)=>{\n    done(financialErr);\n})",
              "err": {
                "message": "AssertionError: expected 13569 to be below 13000",
                "estack": "AssertionError: expected 13569 to be below 13000\n    at C:\\Users\\keyul.shah\\Desktop\\Test cases\\trunk -processor\\test\\9_mitm.spec.js:155:32\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "diff": "- 13569\n+ 13000\n"
              },
              "uuid": "f6980553-a094-4830-8b8e-1f7a0c7b56be",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When TOR occur, reversal request (0420) should include RT=T in field 48",
              "fullTitle": "MITM testing When TOR occur, reversal request (0420) should include RT=T in field 48",
              "timedOut": false,
              "duration": 17333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000999\";\npxp.postAuthorizeTransactionOnline(financialReq)\n.then((financialRsp)=>{\n    logger.info(financialRsp.body);\n    /* Read request data of 0200 */\n    fs.readFile(requestPath,(err,data)=>{\n        if(err) throw err;\n        let responseData = JSON.parse(data);\n        for(var i = 0; i < responseData.length; i++) {\n            var obj = responseData[i];\n            obj = JSON.parse(obj);\n            if(obj.hasOwnProperty(\"type\")){\n                type = obj[\"type\"];\n            }\n            if(obj[\"description\"] == \"Add_Data_Private\"){\n                ksn = obj[\"content\"];\n                break;\n            }\n        }\n        console.log(ksn);\n        console.log(type);\n        expect(type).equal(\"0200\");\n    });\n\n    /* Read request data of 0420 */\n    setTimeout(function(){\n        fs.readFile(requestPath,(err,data)=>{\n            if(err) throw err;\n            let responseData = JSON.parse(data);\n            for(var i = 0; i < responseData.length; i++) {\n                var obj = responseData[i];\n                obj = JSON.parse(obj);\n                if(obj.hasOwnProperty(\"type\")){\n                    type = obj[\"type\"];\n                }\n                if(obj[\"description\"] == \"Add_Data_Private\"){\n                    reversalKsn = obj[\"content\"];\n                    break;\n                }\n            }\n            expect(type).equal(\"0420\");\n            expect(reversalKsn).to.endsWith('RT001T');\n            done();\n        });\n    }, 4000); // waiting for reversal process to be finished, before read from file.\n}).catch((financialErr)=>{\n    done(financialErr);\n})",
              "err": {},
              "uuid": "16cff705-e0fa-447b-8b35-da3967edc638",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When TOR occur, reversal request (0420) should increase the KSN value",
              "fullTitle": "MITM testing When TOR occur, reversal request (0420) should increase the KSN value",
              "timedOut": false,
              "duration": 16357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000999\";\npxp.postAuthorizeTransactionOnline(financialReq)\n.then((financialRsp)=>{\n    logger.info(financialRsp.body);\n    /* Read request data of 0200 */\n    fs.readFile(requestPath,(err,data)=>{\n        if(err) throw err;\n        let responseData = JSON.parse(data);\n        for(var i = 0; i < responseData.length; i++) {\n            var obj = responseData[i];\n            obj = JSON.parse(obj);\n                    if(obj.hasOwnProperty(\"type\")){\n                    type = obj[\"type\"];\n                    }\n                if(obj[\"description\"] == \"Add_Data_Private\"){\n                    ksn = obj[\"content\"];\n                    break;\n                }\n        }\n        console.log(ksn);\n        console.log(type);\n        expect(type).equal(\"0200\");\n    });\n    /* Read request data of 0420 */\n    setTimeout(function(){\n        fs.readFile(requestPath,(err,data)=>{\n            if(err) throw err;\n            let responseData = JSON.parse(data);\n            for(var i = 0; i < responseData.length; i++) {\n                var obj = responseData[i];\n                obj = JSON.parse(obj);\n                        if(obj.hasOwnProperty(\"type\")){\n                        type = obj[\"type\"];\n                        }\n                    if(obj[\"description\"] == \"Add_Data_Private\"){\n                        reversalKsn = obj[\"content\"];\n                        break;\n                    }\n            }\n            var n = ksn.lastIndexOf(\"D\");\n            var endKsn = ksn.substring(n, ksn.length);\n            endKsn = (parseInt(endKsn, 16) + 1).toString(16); //increment KSN value of 0200\n            expect(type).equal(\"0420\");\n            expect(reversalKsn).to.endsWith(endKsn.toUpperCase()+'RT001T');\n            done();\n        });\n    }, 4000); // waiting for reversal process to be finished, before read from file.\n}).catch((financialErr)=>{\n    done(financialErr);\n})",
              "err": {},
              "uuid": "df52f910-2822-4142-a9c3-f893e6a50910",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When OpeN2 doesn't recieve request and reverse transaction successful after waiting for hostResponseTimeout + 5, queue count should not increase",
              "fullTitle": "MITM testing When OpeN2 doesn't recieve request and reverse transaction successful after waiting for hostResponseTimeout + 5, queue count should not increase",
              "timedOut": false,
              "duration": 16805,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "financialReq.paymentInfo.amount = \"000000000999\";\nvar count = 0;\npxp.getOfflineTransactionsCount()\n.then((offlineRsp) => {\n    count = offlineRsp.body.transactionCount;\n    console.log(\"Count before TOR-----> \"+count);\n    pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp)=>{\n        logger.info(financialRsp.body);\n    \n        setTimeout(function(){\n            fs.readFile(responsePath,(err,data)=>{\n                if(err) throw err;\n                let responseData = JSON.parse(data);\n                \n                for(var i = 0; i < responseData.length; i++) {\n                    var obj = responseData[i];\n                    obj = JSON.parse(obj);\n                        if(obj.hasOwnProperty(\"type\")){\n                            type = obj[\"type\"];\n                        }\n                        if(obj[\"description\"] == \"RC\"){\n                            responseCode = obj[\"content\"];\n                            break;\n                        }\n                }\n                expect(type).equal(\"0430\");\n                console.log(responseCode);\n                if( responseCode == \"25\" ){\n                    pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        newCount = Number( offlineRsp.body.transactionCount);\n                        console.log(\"Count after TOR reversal-----> \"+ newCount);\n                        expect(newCount).equal(Number(count));\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n                }else{\n                    done();                    \n                }\n            });\n        }, 4000); // waiting for reversal process to be finished, before read from file.\n    \n    }).catch((financialErr)=>{\n        done(financialErr);\n    }) \n})\n.catch((offlineRspErr) => {\n    done(offlineRspErr);\n});",
              "err": {},
              "uuid": "514a1957-a60b-4676-9d66-136c2661b22d",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When PxProcessor doesn't recieve the response and Reverse transaction is failed after waiting for hostResponseTimeout + 5, queue count should increase by 1",
              "fullTitle": "MITM testing When PxProcessor doesn't recieve the response and Reverse transaction is failed after waiting for hostResponseTimeout + 5, queue count should increase by 1",
              "timedOut": false,
              "duration": 30317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(35000);\nfinancialReq.paymentInfo.amount = \"000000000996\";\nvar count = 0;\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\npxp.getOfflineTransactionsCount()\n.then((offlineRsp) => {\n    count = offlineRsp.body.transactionCount;\n    console.log(\"Count before TOR-----> \"+count);\n    pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp)=>{\n        logger.info(financialRsp.body);\n    \n        setTimeout(function(){\n            fs.readFile(responsePath,(err,data)=>{\n                if(err) throw err;\n                let responseData = JSON.parse(data);\n                for(var i = 0; i < responseData.length; i++) {\n                    var obj = responseData[i];\n                    obj = JSON.parse(obj);\n                        if(obj.hasOwnProperty(\"type\")){\n                            type = obj[\"type\"];\n                        }                            \n                        if(obj[\"name\"] == \"39\"){\n                            responseCode = obj[\"content\"];\n                            break;\n                        }\n                }\n                console.log(type);\n                expect(type).equal(\"0430\");\n                logger.info(responseCode);\n                if(responseCode== \"00\" ){\n                    pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        newCount = Number( offlineRsp.body.transactionCount);\n                        logger.info(\"Count after TOR reversal-----> \"+ newCount);\n                        expect(newCount).equal(Number(count)+1);\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n                }else{\n                    done();                    \n                }\n            });\n        }, waitTime); // waiting for reversal process to be finished and timeout, before read from file.\n    \n    }).catch((financialErr)=>{\n        done(financialErr);\n    }) \n})\n.catch((offlineRspErr) => {\n    done(offlineRspErr);\n});",
              "err": {},
              "uuid": "ed0e558e-0bdd-4f6a-ad75-a7f3517eda20",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When PxProcessor doesn't recieve the response and reverse transaction is successful after waiting for hostResponseTimeout + 5, queue count should not increase",
              "fullTitle": "MITM testing When PxProcessor doesn't recieve the response and reverse transaction is successful after waiting for hostResponseTimeout + 5, queue count should not increase",
              "timedOut": false,
              "duration": 29592,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(35000);\nfinancialReq.paymentInfo.amount = \"000000000995\";\nvar count = 0;\nwaitTime = 5000+(merchConfigsReq.connectionTimeout*1000);\npxp.getOfflineTransactionsCount()\n.then((offlineRsp) => {\n    count = offlineRsp.body.transactionCount;\n    console.log(\"Count before TOR-----> \"+count);\n    pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp)=>{\n        logger.info(financialRsp.body);\n        setTimeout(function(){\n            fs.readFile(responsePath,(err,data)=>{\n                if(err) throw err;\n                let responseData = JSON.parse(data);\n                for(var i = 0; i < responseData.length; i++) {\n                    var obj = responseData[i];\n                    obj = JSON.parse(obj);\n                        if(obj.hasOwnProperty(\"type\")){\n                            type = obj[\"type\"];\n                        }                            \n                        if(obj[\"name\"] == \"39\"){\n                            responseCode = obj[\"content\"];\n                            break;\n                        }\n                }\n                console.log(type);\n                expect(type).equal(\"0430\");\n                logger.info(responseCode);\n                if(responseCode== \"00\" ){\n                    pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        newCount = Number( offlineRsp.body.transactionCount);\n                        logger.info(\"Count after TOR reversal-----> \"+ newCount);\n                        expect(newCount).equal(Number(count));\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n                }else{\n                    done();                    \n                }\n            });\n        }, waitTime); // waiting for reversal process to be finished and timeout, before read from file.\n    }).catch((financialErr)=>{\n        done(financialErr);\n    }) \n})\n.catch((offlineRspErr) => {\n    done(offlineRspErr);\n});",
              "err": {},
              "uuid": "bcbf50d4-11b1-4139-af90-59afcd93c1c1",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When terminal is reboot during Financial transaction, queue count should increase by 1",
              "fullTitle": "MITM testing When terminal is reboot during Financial transaction, queue count should increase by 1",
              "timedOut": false,
              "duration": 90451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(120000);\nfinancialReq.paymentInfo.amount = \"000000000994\";\nvar count = 0;\npxp.getOfflineTransactionsCount()\n.then((offlineRsp) => {\n    count = offlineRsp.body.transactionCount;\n    console.log(\"Count before TOR-----> \"+count);\n    pxp.postAuthorizeTransactionOnline(financialReq)\n    .then((financialRsp)=>{\n        logger.info(financialRsp.body);\n        setTimeout(function(){\n            fs.readFile(responsePath,(err,data)=>{\n                if(err) throw err;\n                let responseData = JSON.parse(data);\n                for(var i = 0; i < responseData.length; i++) {\n                    var obj = responseData[i];\n                    obj = JSON.parse(obj);\n                        if(obj.hasOwnProperty(\"type\")){\n                            type = obj[\"type\"];\n                        }                            \n                        if(obj[\"name\"] == \"39\"){\n                            responseCode = obj[\"content\"];\n                            break;\n                        }\n                }\n                console.log(type);\n                expect(type).equal(\"0210\");\n                logger.info(responseCode);\n                // if(responseCode== \"00\" ){\n                    pxp.getOfflineTransactionsCount()\n                    .then((offlineRsp) => {\n                        newCount = Number( offlineRsp.body.transactionCount);\n                        logger.info(\"Count after TOR reversal-----> \"+ newCount);\n                        expect(newCount).equal(Number(count)+1);\n                        done();\n                    })\n                    .catch((offlineRspErr) => {\n                        done(offlineRspErr);\n                    });\n                // }else{\n                //     done();                    \n                // }\n            });\n        }, 70000); // wait for terminal to restart before checking the count\n    }).catch((financialErr)=>{\n        done(financialErr);\n    }) \n})\n.catch((offlineRspErr) => {\n    done(offlineRspErr);\n});",
              "err": {},
              "uuid": "a89e225e-8a4e-4c5d-94e1-00b71c928f91",
              "parentUUID": "b1e0676a-8f9b-45fb-98c8-959076e396ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4762730f-8684-4506-8649-1f9eea1f4e07",
            "5c3f9c3a-3c73-4dee-bf75-fbef8f43881d",
            "adc7faa4-3276-417f-ac08-283d3798e76c",
            "8d95f835-5b28-4114-b563-8b85c131490b",
            "16cff705-e0fa-447b-8b35-da3967edc638",
            "df52f910-2822-4142-a9c3-f893e6a50910",
            "514a1957-a60b-4676-9d66-136c2661b22d",
            "ed0e558e-0bdd-4f6a-ad75-a7f3517eda20",
            "bcbf50d4-11b1-4139-af90-59afcd93c1c1",
            "a89e225e-8a4e-4c5d-94e1-00b71c928f91"
          ],
          "failures": [
            "f6980553-a094-4830-8b8e-1f7a0c7b56be"
          ],
          "pending": [],
          "skipped": [],
          "duration": 264303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 21000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}